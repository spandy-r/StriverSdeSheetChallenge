import java.util.*;
public class Solution {
	public static ArrayList<Integer> BFS(int vertex, int edges[][]){
		// WRITE YOUR CODE HERE
        boolean visited[]=new boolean[vertex];
        ArrayList<Integer> ans=new ArrayList<>();
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        for(int i=0;i<vertex;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges[0].length;i++){
            ArrayList<Integer> temp=adj.get(edges[0][i]);
            ArrayList<Integer> temp2=adj.get(edges[1][i]);
            temp.add(edges[1][i]);
            temp2.add(edges[0][i]);
        }
        for(ArrayList<Integer> i : adj){
            Collections.sort(i);
        }
        Queue<Integer>q=new LinkedList<>();
        q.add(0);
        visited[0]=true;
        for(int i=0;i<vertex;i++){
            if(!visited[i]){
                q.add(i);
            }
                
        
       
        while(!q.isEmpty()){
           int top=q.poll();
             
            
            ans.add(top);
            for(int it:adj.get(top)){
                if(!visited[it]){
                    q.add(it);
                    visited[it]=true;
                   }
            }
        }
            }
          
        
        return ans;
	}
    
}

