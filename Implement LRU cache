import java.util.*;
class Node{
    Node next;
    Node prev;
    int key,val;
    Node(int key,int val){
        this.next=null;
        this.prev=null;
        this.key=key;
        this.val=val;
    }
}

public class LRUCache
{
    Node  head=new Node(0,0);
    Node tail=new Node(0,0);
    int capacity;
    HashMap<Integer,Node>  map=new HashMap<>();
    
    LRUCache(int capacity)
    {
        // Write your code here
      
        this.capacity=capacity;
       
        
       
        head.next=tail;
        tail.prev=head;
       
    }

    public int get(int key)
    {
        // Write your code here
        if(map.containsKey(key)){
            Node node=map.get(key);
            remove(node);
            insert(node);
             return node.val;
        }else{
            return -1;
        }
       
       
        
    }

    public void put(int key, int value)
    {
        // Write your code here
        if(!map.containsKey(key)){
            if(map.size()==capacity){
                remove(tail.prev);
            }
        }else{
            Node node=map.get(key);
            remove(node);
        }
        Node node=new Node(key,value);
        insert(node);
        
    }
    
   
    private void remove(Node node){
        map.remove(node.key);
        node.prev.next=node.next;
        node.next.prev=node.prev;
        
    }
    
    private void insert(Node node){
        node.prev=head;
        node.next=head.next;
        node.next.prev=node;
        head.next=node;
        map.put(node.key,node);
    }
}
 
