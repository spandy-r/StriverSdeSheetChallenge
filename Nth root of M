public class Solution {
//     public static double findNthRootOfM(int n, long m) {
//     	// Write your code here.
//         double lo=1,hi=m;
//         double eps=1e-8;
//         while((hi-lo)>eps){
//             double mid=(lo+hi)/2.0;
//             if(multiply(mid,n)<(double)m){
//                 lo=mid;
//             }else{
//                 hi=mid;
//             }
//         }
//         return lo;
//     }
//     public static double multiply(double num,int n){
//         double ans=1.0;
//         for(int i=1;i<=n;i++){
//             ans=ans*num;
//         }
//         return ans;
//     }
// }

/*
    Time Complexity : O(log(M) * log(N))
    Space Complexity : O(1),
        
    where N and M are given integers.
*/

public static double findNthRootOfM(int n, long m) {

    // Variable to store maximum possible error in order
    // to obtain the precision of 10^(-6) in the answer.
    double error = 1e-7;

    // Difference between the current answer, and the answer
    // in next iteration, which we take as big as possible initially.
    double diff = 1e18;

    // Guessed answer value
    double xk = 10;//from 1-1

    // We keep on finding the precise answer till the difference between
    // answer of two consecutive iteration become less than 10^(-7).
    while (diff > error) {

        // Answer value in the next iteration.
        double xk_1 = (Math.pow(xk, n) * (n - 1) + m) / (n * Math.pow(xk, n - 1));

        // Difference of answer in consecutive states updated.
        diff = Math.abs(xk - xk_1);

        // Updating the current answer with the answer of next iteration.
        xk = xk_1;
    }

    // Returning the nthRootOfM with precision upto 6 decimal places
    // which is xk.
    return xk;
}
}
