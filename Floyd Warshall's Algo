import java.util.*;

public class Solution {
  static int floydWarshall(int n, int m, int src, int dest, ArrayList<ArrayList<Integer>> edges) {
    // Write your code here.
      return bellmonFord(n,m,src,dest,edges);
  }
    static int bellmonFord(int n, int m, int src, int dest, ArrayList<ArrayList<Integer>> edges) {
      // Write your code here.
       int dist[]=new int[n+1];
        
        Arrays.fill(dist,1000000000);
        dist[src]=0;

        

       for(int j=1;j<=n-1;j++){ //it will also work for <=n
        for(ArrayList<Integer> it:edges){
            int u=it.get(0);
            int v=it.get(1);
            int wt=it.get(2);
            if(dist[u]!=1e9)
            relax(u,v,wt,dist);
          }
           
       }

        
       
        return dist[dest];
    }
     public static void relax(int u,int v,int wt,int[]dist){
         if(dist[u]+wt<dist[v]){
             dist[v]=dist[u]+wt;
         }
     }

}
