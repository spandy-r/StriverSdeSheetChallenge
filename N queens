import java.util.*;
public class Solution {
    public static ArrayList<ArrayList<Integer>> solveNQueens(int n) {
        // Write your code here.
        int[][]board=new int[n][n];
        
        ArrayList<ArrayList<Integer>> res=new ArrayList<>();
        int leftRow[]=new int[n];
        int lowerDiagonal[]=new int[2*n-1];
        int upperDiagonal[]=new int[2*n-1];
        
        solve(0,board,res,leftRow,lowerDiagonal,upperDiagonal);
        
        return res;
    }
    public static void solve(int col,int[][]board,ArrayList<ArrayList<Integer>> res,int[]leftRow,int[]lowerDiagonal,int[]upperDiagonal){
        
        if(col==board.length){
            ArrayList<Integer>ans=new ArrayList<>();
            for(int i=0;i<board.length;i++){
                for(int j=0;j<board.length;j++){
                    ans.add(board[i][j]);
                }
            }
            res.add(ans);
        }
        
        for(int row=0;row<board.length;row++){
            if(leftRow[row]==0 && lowerDiagonal[row+col]==0 && upperDiagonal[board.length-1+col-row]==0){
                board[row][col]=1;
                leftRow[row]=1;
                lowerDiagonal[row+col]=1;
                upperDiagonal[board.length-1+col-row]=1;
                solve(col+1,board,res,leftRow,lowerDiagonal,upperDiagonal);
                board[row][col]=0;
                leftRow[row]=0;
                lowerDiagonal[row+col]=0;
                upperDiagonal[board.length-1+col-row]=0;
            }
        }
    }
    
}
