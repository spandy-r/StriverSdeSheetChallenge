/************************************************************
  
   Following is the TreeNode class structure
   
   class TreeNode<T> { 
        T data; 
        TreeNode<T> left;
        TreeNode<T> right;
  
        TreeNode(T data) { 
            this.data = data; 
            left = null; 
            right = null; 
        }
   }
    
 ************************************************************/
import java.util.*;

public class Solution {
	public static TreeNode<Integer> getTreeFromPostorderAndInorder(int[] postOrder, int[] inOrder) {
		// Write your code here.
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<inOrder.length;i++){
            map.put(inOrder[i],i);
        }
        return helper(inOrder,0,inOrder.length-1,postOrder,0,postOrder.length-1,map);
	}
    public static TreeNode<Integer> helper(int inOrder[],int inS,int inE,int postOrder[],int postS,int postE,HashMap<Integer,Integer>map){
        if(postS>postE || inS>inE)return null;
        
        TreeNode<Integer> root=new TreeNode<>(postOrder[postE]);
        int inRoot=map.get(postOrder[postE]);
        int numsLeft=inRoot-inS;
        
        root.left=helper(inOrder,inS,inRoot-1,postOrder,postS,postS+numsLeft-1,map);
        root.right=helper(inOrder,inRoot+1,inE,postOrder,postS+numsLeft,postE-1,map);
        
        return root;
    }
}
