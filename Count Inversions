import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        // Write your code here.
		long[] temp=new long[n];
		return mergeSort(arr,temp,0,n-1);
		
    }
	
	public static long mergeSort(long arr[],long temp[],int left,int right){
		int mid;
		long inv_count=0;
		
		if(right>left){
			mid=(right+left)/2;
			inv_count+=mergeSort(arr,temp,left,mid);
			inv_count+=mergeSort(arr,temp,mid+1,right);
			inv_count+=merge(arr,temp,left,mid+1,right);
			
		}
		return inv_count;
	}
	
	public static long merge(long arr[],long temp[],int left,int mid,int right){
		int i,j,k;
		long inv_count=0;
		i=left;
		j=mid;
		k=left;
		
		while((i<=mid-1)&&(j<=right)){
			if(arr[i]<=arr[j]){
				temp[k++]=arr[i++];
			}else{
				temp[k++]=arr[j++];
				
				inv_count+=(long)(mid-i);
			}
		}
		while(i<=mid-1){
			temp[k++]=arr[i++];
		}
		while(j<=right){
			temp[k++]=arr[j++];
			
		}
		for(int x=left;x<=right;x++){
			arr[x]=temp[x];
		}
		return inv_count;
	}
}
