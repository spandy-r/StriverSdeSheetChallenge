/*import java.util.* ;
import java.io.*; 
/***********************************************
    Following is the class structure of the Node class:

    class Node {
        int data;
        Node next;

        Node(int x) {
            this.data = x;
            this.next = null;
        }
    }

************************************************/

public class Solution {
    public static Node rotate(Node head, int k) {
        // Write your code here.
        Node temp=head;
        int l=length(temp);
        if(l==0)return head;
        k=k%l;
        Node fast=head;
        Node slow=head;
        int i=0;
        while(i<k){
            if(fast==null)
                return head;
            fast=fast.next;
            i++;
        }
        while(fast.next!=null){
            fast=fast.next;
            slow=slow.next;
        }
        temp=head;
        fast.next=head;
        head=slow.next;
        slow.next=null;
        return head;
        
    }
    public static int length(Node head){
        int c=0;
        
        while(head!=null){
            head=head.next;
            c++;
        }
        return c;
    }
}

*/

//optimised approach

import java.util.* ;
import java.io.*; 
/***********************************************
    Following is the class structure of the Node class:

    class Node {
        int data;
        Node next;

        Node(int x) {
            this.data = x;
            this.next = null;
        }
    }

************************************************/

public class Solution {
    public static Node rotate(Node head, int k) {
        // Write your code here.
        if(head==null || head.next==null || k==0)return head;
        Node temp=head;
        int l=length(temp);
        k=k%l;
        int i=1;
        temp=head;
        while(i<(l-k)){
            temp=temp.next;
            i++;
        }
        head=temp.next;
        temp.next=null;
       
        return head;
    }
    public static int length(Node head){
        int c=0;
        Node temp=head;
        while(temp.next!=null){
            temp=temp.next;
            c++;
        }
        temp.next=head;
        c++;
        return c;
    }
}
