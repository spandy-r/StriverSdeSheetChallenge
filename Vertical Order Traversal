/************************************************************

    Following is the TreeNode class structure

    class TreeNode<T> 
    {
       public:
        T data;
        TreeNode<T> left;
        TreeNode<T> right;

        TreeNode(T data) 
        {
            this.data = data;
            left = null;
            right = null;
        }
    };

************************************************************/

import java.util.*;
class Node{
    int x,y;
    TreeNode<Integer> node;
    Node(TreeNode<Integer> node,int x,int y){
        this.node=node;
        this.x=x;
        this.y=y;
    }
}
public class Solution 
{
    public static ArrayList<Integer> verticalOrderTraversal(TreeNode<Integer> root) 
    {
        //    Write your code here.
        Queue<Node> q=new LinkedList<>();
        TreeMap<Integer,TreeMap<Integer,ArrayList<Integer>>> map=new TreeMap<>();
        q.add(new Node(root,0,0));
        while(!q.isEmpty()){
            Node front=q.remove();
            TreeNode curr=front.node;
            int x=front.x;
            int y=front.y;
            if(!map.containsKey(x)){
                map.put(x,new TreeMap<>());
            }
            if(!map.get(x).containsKey(y)){
                map.get(x).put(y,new ArrayList<>());
            }
            map.get(x).get(y).add(front.node.data);
            
            if(curr.left!=null){
                q.add(new Node(curr.left,x-1,y+1));
            }
            if(curr.right!=null){
                q.add(new Node(curr.right,x+1,y+1));
            }
        }
        ArrayList<Integer> ans=new ArrayList<>();
        for (TreeMap < Integer, ArrayList < Integer >> ys: map.values()) {
            for(ArrayList<Integer> arr:ys.values()){
                for(int i :arr){
                    ans.add(i);
                }
            }
        }
        return ans;
    }
}
